name: Build and Release

on:
  push:
    branches: [ master ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install cargo-bundle
        run: cargo install cargo-bundle
      
      - name: Build for x86_64
        run: |
          cd ai-terminal
          cargo build --release --target x86_64-apple-darwin
      
      - name: Build for aarch64
        run: |
          cd ai-terminal
          cargo build --release --target aarch64-apple-darwin
      
      - name: Create Universal Binary
        run: |
          cd ai-terminal
          mkdir -p target/release
          lipo -create \
            target/x86_64-apple-darwin/release/ai-terminal \
            target/aarch64-apple-darwin/release/ai-terminal \
            -output target/release/ai-terminal
      
      - name: Create App Bundle
        run: |
          cd ai-terminal
          # Use the default target for bundle creation
          cargo bundle --release
      
      - name: Create Self-Signed Certificate
        run: |
          cd ai-terminal
          # Create a self-signed certificate for development
          CERT_NAME="AI Terminal Developer ID"
          CERT_PATH="$PWD/temp_certificate.p12"
          CERT_PASSWORD="temporary_password"
          
          # Generate a self-signed certificate (this is for development only)
          security create-keychain -p "$CERT_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$CERT_PASSWORD" build.keychain
          security set-keychain-settings build.keychain
          security import <(openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /dev/stdout -out /dev/stdout -subj "/CN=$CERT_NAME") -k build.keychain -A
          
          # Set keychain search list
          security list-keychains -d user -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$CERT_PASSWORD" build.keychain
          
          # Store the certificate name for later use
          echo "CERT_NAME=$CERT_NAME" >> $GITHUB_ENV
          
          # Note: This self-signed certificate won't pass Gatekeeper on macOS
          # For production, you'd need to use developer certificates from Apple
      
      - name: Sign Application
        run: |
          cd ai-terminal
          APP_PATH="target/release/bundle/osx/AI Terminal.app"
          
          # Sign the application with the self-signed certificate
          # This won't pass Gatekeeper but may avoid "damaged" errors on some systems
          codesign --deep --force --options runtime --sign "$CERT_NAME" "$APP_PATH"
          
          # Remove quarantine attribute
          xattr -rc "$APP_PATH"
          
          # Create an entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.cs.disable-executable-page-protection</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign with entitlements
          codesign --deep --force --options runtime --entitlements entitlements.plist --sign "$CERT_NAME" "$APP_PATH"
          
          # Verify signature
          codesign --verify --verbose "$APP_PATH"
          
      - name: Create DMG
        run: |
          cd ai-terminal
          # Install create-dmg and ImageMagick
          brew install create-dmg imagemagick
          
          # Create a basic background if it doesn't exist
          if [ ! -f "icons/dmg-background.png" ]; then
            mkdir -p icons
            # Create a simple colored background
            convert -size 800x500 -gravity center gradient:gray10-gray30 \
              -fill white -pointsize 24 -annotate 0 "AI Terminal" \
              icons/dmg-background.png
          fi
          
          # Create DMG from the .app bundle
          create-dmg \
            --volname "AI Terminal" \
            --background "icons/dmg-background.png" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "AI Terminal.app" 200 190 \
            --app-drop-link 600 185 \
            "target/release/AI-Terminal-Installer.dmg" \
            "target/release/bundle/osx/AI Terminal.app" || \
          # Fallback if the above fails (perhaps due to background image issues)
          create-dmg \
            --volname "AI Terminal" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "AI Terminal.app" 200 190 \
            --app-drop-link 600 185 \
            "target/release/AI-Terminal-Installer.dmg" \
            "target/release/bundle/osx/AI Terminal.app"
      
      - name: Upload macOS app artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: ai-terminal/target/release/bundle/osx/*.app
          retention-days: 7
          
      - name: Upload macOS DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: ai-terminal/target/release/AI-Terminal-Installer.dmg
          retention-days: 7
  
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04  # Using Ubuntu 20.04 LTS for older GLIBC version
    steps:
      - uses: actions/checkout@v4
      
      - name: Install basic dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential curl git pkg-config \
            libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf \
            ca-certificates
      
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source "$HOME/.cargo/env"
      
      - name: Configure Rust environment
        run: |
          # Set environment variables for maximum compatibility
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          
          # Set static linking for maximum compatibility
          mkdir -p $HOME/.cargo
          echo '[target.x86_64-unknown-linux-gnu]' > $HOME/.cargo/config
          echo 'rustflags = ["-C", "target-feature=+crt-static"]' >> $HOME/.cargo/config
      
      - name: Install cargo-bundle
        run: |
          source "$HOME/.cargo/env"
          cargo install cargo-bundle
      
      - name: Build DEB package
        run: |
          cd ai-terminal
          source "$HOME/.cargo/env"
          
          # Build with compatibility settings
          cargo bundle --release --format deb
      
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: ai-terminal/target/release/bundle/deb/*.deb
          retention-days: 7
