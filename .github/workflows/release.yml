name: Release

on:
  push:
    branches:
      - "master"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install create-dmg (macOS only)
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Install dependencies
        run: |
          cd ai-terminal
          npm ci

      - name: Import Code-Signing Certificates
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      # Create a temporary file with the Apple API key
      - name: Prepare Apple API Key
        if: matrix.os == 'macos-latest'
        run: |
          echo "${{ secrets.APPLE_API_KEY }}" > /tmp/apple_api_key.p8
          chmod 600 /tmp/apple_api_key.p8
          echo "APPLE_API_KEY=/tmp/apple_api_key.p8" >> $GITHUB_ENV

      - name: Build macOS Universal
        if: matrix.os == 'macos-latest'
        run: |
          cd ai-terminal
          chmod +x build-macos.sh
          ./build-macos.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}

      - name: Generate tag
        run: |
          cd ai-terminal
          VERSION=$(node -p "require('./package.json').version")
          echo "RELEASE_TAG=v${VERSION}" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: |
            ai-terminal/src-tauri/target/universal-apple-darwin/bundle/dmg/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Homebrew Formula and Cask
        env:
          HOMEBREW_TAP_REPO: AiTerminalFoundation/homebrew-ai-terminal
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
        run: |
          # Clone the tap repository
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/AiTerminalFoundation/homebrew-ai-terminal.git homebrew-tap
          cd homebrew-tap

          # Set version variables
          VERSION="${{ github.event.release.tag_name }}"
          VERSION_NUMBER="${VERSION#v}"
          DMG_URL="https://github.com/AiTerminalFoundation/ai-terminal/releases/download/${VERSION}/ai-terminal-${VERSION_NUMBER}.dmg"
          SHA256=$(curl -sL "${DMG_URL}" | shasum -a 256 | awk '{print $1}')

          # Update Formula/ai-terminal.rb
          sed -i '' "s/version \".*\"/version \"${VERSION_NUMBER}\"/" Formula/ai-terminal.rb
          sed -i '' "s|url \".*\"|url \"${DMG_URL}\"|" Formula/ai-terminal.rb
          sed -i '' "s/sha256 \".*\"/sha256 \"${SHA256}\"/" Formula/ai-terminal.rb

          # Update Casks/ai-terminal.rb
          sed -i '' "s/version \".*\"/version \"${VERSION_NUMBER}\"/" Casks/ai-terminal.rb
          sed -i '' "s|url \".*\"|url \"${DMG_URL}\"|" Casks/ai-terminal.rb
          sed -i '' "s/sha256 \".*\"/sha256 \"${SHA256}\"/" Casks/ai-terminal.rb

          # Commit and push changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/ai-terminal.rb Casks/ai-terminal.rb
          git commit -m "Update ai-terminal to ${VERSION}"
          git push
